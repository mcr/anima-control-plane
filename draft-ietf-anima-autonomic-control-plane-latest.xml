<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<!-- You want a table of contents -->
<?rfc symrefs="yes"?>
<!-- Use symbolic labels for references -->
<?rfc sortrefs="yes"?>
<!-- This sorts the references -->
<?rfc iprnotified="no" ?>
<!-- Change to "yes" if someone has disclosed IPR for the draft -->
<?rfc compact="yes"?>
<rfc ipr="trust200902" docName="draft-ietf-anima-autonomic-control-plane-01" category="std">
	<front>
		<title abbrev="An Autonomic Control Plane">An Autonomic Control Plane</title>
		<author role="editor" fullname="Michael H. Behringer" initials="M." surname="Behringer">
			<organization>Cisco Systems</organization>

			<address>
				<postal>
					<street>Building D, 45 Allee des Ormes</street>
					<city>Mougins</city>
					<region/>
					<code>06250</code>
					<country>France</country>
				</postal>
			<email>mbehring@cisco.com</email>
			</address>
		</author>
		<author fullname="Steinthor Bjarnason" initials="S." surname="Bjarnason">
			<organization>Cisco Systems</organization>
			<address>
				<email>sbjarnas@cisco.com</email>
			</address>
		</author>
		<author fullname="Balaji BL" initials="Balaji" surname="BL">
			<organization>Cisco Systems</organization>
			<address>
				<email>blbalaji@cisco.com</email>
			</address>
		</author>
		<author fullname="Toerless Eckert" initials="T." surname="Eckert">
			<organization>Cisco Systems</organization>
			<address>
				<email>eckert@cisco.com</email>
			</address>
		</author>
		<date day="6" month="October" year="2015"/>
		<area>Operations and Management</area>
		<workgroup>ANIMA WG</workgroup>
		<abstract>
			<t>
				Autonomic functions need a control plane to communicate, which depends on some addressing and routing. This Autonomic Control Plane should ideally be self-managing, and as independent as possible of configuration. This document defines an "Autonomic Control Plane", with the primary use as a control plane for autonomic functions. It also serves as a "virtual out of band channel" for OAM communications over a network that is not configured, or mis-configured.  
			</t>
		</abstract>
	</front>
	<middle>
		<section anchor="intro" title="Introduction">
			<t>Autonomic Networking is a concept of self-management: Autonomic functions self-configure, and negotiate parameters and settings across the network. <xref target="RFC7575"/> defines the fundamental ideas and design goals of Autonomic Networking. A gap analysis of Autonomic Networking is given in <xref target="RFC7576"/>. The reference architecture for Autonomic Networking in the IETF is currently being defined in the document <xref target="I-D.behringer-anima-reference-model"/></t>
			<t>Autonomic functions need a stable and robust infrastructure to communicate on. This infrastructure should be as robust as possible, and it should be re-usable by all autonomic functions. <xref target="RFC7575"/> calls it the "Autonomic Control Plane". This document defines the Autonomic Control Plane. </t>
			<t>Today, the management and control plane of networks typically runs in the global routing table, which is dependent on correct configuration and routing. Misconfigurations or routing problems can therefore disrupt management and control channels. Traditionally, an out of band network has been used to recover from such problems, or personnel is sent on site to access devices through console ("craft" see <xref target="craft"/>) ports. However, both options are operationally expensive.</t>
			<t>
			In increasingly automated networks either controllers or distributed autonomic service agents in the network require a control plane which is independent of the network they manage, to avoid impacting their own operations. </t>
			<t>
			This document describes options for a self-forming, self-managing and self-protecting "Autonomic Control Plane" (ACP) which is inband on the network, yet as independent as possible of configuration, addressing and routing problems (for details how this achieved, see <xref target="self-creation"/>). It therefore remains operational even in the presence of configuration errors, addressing or routing issues, or where policy could inadvertently affect control plane connectivity. The Autonomic Control Plane serves several purposes at the same time: 
			<list style="symbols">
			<t>Autonomic functions communicate over the ACP. The ACP therefore supports directly Autonomic Networking functions, as described in <xref target="I-D.behringer-anima-reference-model"/>. For example, GRASP <xref target="I-D.ietf-anima-grasp"/> can run inside the ACP. </t>
			<t>An operator can use it to log into remote devices, even if the data plane is misconfigured or unconfigured.</t>
			<t>A controller or network management system can use it to securely bootstrap network devices in remote locations, even if the network in between is not yet configured; no data-plane dependent bootstrap configuration is required. An example of such a secure bootstrap process is described in <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/> </t>
			</list></t>
			<t>This document describes some use cases for the ACP in <xref target="usage"/>, it defines the requirements in <xref target="requirements"/>, <xref target="overview"/> gives an overview how an Autonomic Control Plane is constructed, and in <xref target="self-creation"/> the detailed process is explained. <xref target="workarounds"/> explains how non-autonomic nodes and networks can be integrated, <xref target="protocol"/> defines the negotiation protocol, and <xref target="channel"/> the first channel types for the ACP.</t>
			<t>The document <xref target="I-D.eckert-anima-stable-connectivity">"Autonomic Network Stable Connectivity"</xref> describes how the ACP can be used to provide stable connectivity for OAM applications. It also explains on how existing management solutions can leverage the ACP in parallel with traditional management models, when to use the ACP versus the data plane, how to integrate IPv4 based management, etc. </t>
		</section>
		<!-- intro -->

		<section anchor="usage" title="Use Cases for an Autonomic Control Plane">

			<section anchor="infrastructure" title="An Infrastructure for Autonomic Functions">
				<t>Autonomic Functions need a stable infrastructure to run on, and all autonomic functions should use the same infrastructure to minimise the complexity of the network. This way, there is only need for a single discovery mechanism, a single security mechanism, and other processes that distributed functions require. </t>
			</section> 
			<!-- infrastructure --> 

			<section anchor="bootstrap" title="Secure Bootstrap over an Unconfigured Network">
				<t>Today, bootstrapping a new device typically requires all devices between a controlling node (such as an SDN controller) and the new device to be completely and correctly addressed, configured and secured. Therefore, bootstrapping a network happens in layers around the controller. Without console access (for example through an out of band network) it is not possible today to make devices securely reachable before having configured the entire network between.</t> 
				<t>With the ACP, secure bootstrap of new devices can happen without requiring any configuration on the network. A new device can automatically be bootstrapped in a secure fashion and be deployed with a domain certificate. This does not require any configuration on intermediate nodes, because they can communicate through the ACP. </t>
			</section>
			<!-- bootstrap -->
			
			<section anchor="reachability" title="Data Plane Independent Permanent Reachability">
				<t>Today, most critical control plane protocols and network management protocols are running in the data plane (global routing table) of the network. This leads to undesirable dependencies between control and management plane on one side and the data plane on the other: Only if the data plane is operational, will the other planes work as expected.</t>
				<t>Data plane connectivity can be affected by errors and faults, for example certain AAA misconfigurations can lock an administrator out of a device; routing or addressing issues can make a device unreachable; shutting down interfaces over which a current management session is running can lock an admin irreversibly out of the device. Traditionally only console access can help recover from such issues. </t>
				<t>Data plane dependencies also affect NOC/SDN controller applications: Certain network changes are today hard to operate, because the change itself may affect reachability of the devices. Examples are address or mask changes, routing changes, or security policies. Today such changes require precise hop-by-hop planning.</t>
				<t>The ACP provides reachability that is largely independent of the data plane, which allows control plane and management plane to operate more robustly:
				<list style="symbols">
					<t>For management plane protocols, the ACP provides the functionality of a "Virtual-out-of-band (VooB) channel", by providing connectivity to all devices regardless of their configuration or global routing table. </t>
					<t>For control plane protocols, the ACP allows their operation even when the data plane is temporarily faulty, or during transitional events, such as routing changes, which may affect the control plane at least temporarily. This is specifically important for autonomic service agents, which could affect data plane connectivity.</t> 
				</list>
				</t>
				<t>The document <xref target="I-D.eckert-anima-stable-connectivity">"Autonomic Network Stable Connectivity"</xref> explains the use cases for the ACP in significantly more detail and explains how the ACP can be used in practical network operations. </t>
			</section>
			<!-- reachability -->
		</section>
		<!-- usage -->

		<section anchor="requirements" title="Requirements">
			<t>The Autonomic Control Plane has the following requirements: 
			<list style="numbers">
			<t>The ACP SHOULD provide robust connectivity: As far as possible, it should be independent of configured addressing, configuration and routing. Requirements 2 and 3 build on this requirement, but also have value on their own.</t>
			<t>The ACP MUST have a separate address space from the data plane. Reason: traceability, debug-ability, separation from data plane, security (can block easily at edge). </t>
			<t>The ACP MUST use autonomically managed address space. Reason: easy bootstrap and setup ("autonomic"); robustness (admin can't mess things up so easily). This document suggests to use ULA addressing for this purpose.</t>
			<t>The ACP MUST be generic. Usable by all the functions and protocols of the AN infrastructure. It MUST NOT be tied to a particular protocol. </t>
			<t>The ACP MUST provide security: Messages coming through the ACP MUST be authenticated to be from a trusted node, and SHOULD (very strong SHOULD) be encrypted.  </t>
			</list></t>
			<t>The default mode of operation of the ACP is hop-by-hop, because this interaction can be built on IPv6 link local addressing, which is autonomic, and has no dependency on configuration (requirement 1). It may be necessary to have end-to-end connectivity in some cases, for example to provide an end-to-end security association for some protocols. This is possible, but then has a dependency on routable address space. </t>
		</section> 
		<!-- requirements -->

		<section anchor="overview" title="Overview">
			<t>The Autonomic Control Plane is constructed in the following way (for details, see <xref target="self-creation"/>): 
			<list style="symbols">
				<t>An autonomic node creates a virtual routing and forwarding (VRF) instance, or a similar virtual context. </t>
				<t>It determines, following a policy, a candidate peer list. This is the list of nodes to which it should establish an autonomic control plane. Default policy is: To all adjacent nodes in the same domain. Intent can override this default policy.</t>
				<t>For each node in the candidate peer list, it authenticates that node and negotiates a mutually acceptable channel type. </t>
				<t>It then establishes a secure tunnel of the negotiated channel type. These tunnels are placed into the previously set up VRF. This creates an overlay network with hop-by-hop tunnels.</t>
				<t>Inside the ACP VRF, each node sets up a virtual interface with its ULA IPv6 address.</t>
				<t>Each node runs a lightweight routing protocol, to announce reachability of the virtual addresses inside the ACP. </t>
				<t>Non-autonomic NMS systems or controllers have to be manually connected into the ACP.</t>
				<t>Connecting over non-autonomic Layer-3 clouds initially requires a tunnel between autonomic nodes.</t> 
				<t>None of the above operations (except manual ones) is reflected in the configuration of the device. </t>
			</list></t>
			<t>The following figure illustrates the ACP. </t>
<t>
   <figure anchor='acp'>
   	<artwork>
        autonomic node 1                  autonomic node 2                            
       ...................               ...................       
secure .                 .   secure      .                 .  secure
tunnel :  +-----------+  :   tunnel      :  +-----------+  :  tunnel
..--------| ACP VRF   |---------------------| ACP VRF   |---------..  
       : / \         / \   &lt;--routing--&gt;   / \         / \ :          
       : \ /         \ /                   \ /         \ / :
..--------|  virtual  |---------------------|  virtual  |---------..
       :  | interface |  :               :  | interface |  :
       :  +-----------+  :               :  +-----------+  :
       :                 :               :                 :           
       :   data plane    :...............:   data plane    :           
       :                 :    link       :                 :           
       :.................:               :.................:           
	</artwork>
   </figure>
</t>
				<t>The resulting overlay network is normally based exclusively on hop-by-hop tunnels. This is because addressing used on links is IPv6 link local addressing, which does not require any prior set-up. This way the ACP can be built even if there is no configuration on the devices, or if the data plane has issues such as addressing or routing problems. </t>
				
			</section>
		<!-- overview -->

		<section anchor="self-creation" title="Self-Creation of an Autonomic Control Plane">

		   <t>This section describes the steps to set up an Autonomic Control Plane, and highlights the 
		      key properties which make it "indestructible" against many inadvert changes to the data plane, for example caused by misconfigurations. </t>

			<section anchor="preconditions" title="Preconditions">
               <t>
                  An autonomic node can be a router, switch, controller, NMS host, or any other IP device. We assume an autonomic node has: 
			   <list style="symbols">
			    <t>A globally unique domain certificate, with which it 
                  can cryptographically assert its membership of the domain. The document 
                  <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/> describes how a
                  domain certificate can be automatically and securely derived from a vendor 
                  specific Unique Device Identifier (UDI) or IDevID certificate. (Note the UDI used in this document is NOT the UUID specified in <xref target="RFC4122"/>.)
	   			</t>
				<t>An adjacency table, which contains information about adjacent autonomic nodes, at a minimum: node-ID, IP address, domain, certificate. An autonomic device maintains this adjacency table up to date. 
				Where the next autonomic device is not directly adjacent, the information in the adjacency table can be supplemented by configuration. For example, the node-ID and IP address could be configured.</t>
			   </list>
			  </t>
			  <t>The adjacency table MAY contain information about the validity and trust of the adjacent autonomic node's certificate. However, subsequent steps MUST always start with authenticating the peer.</t> 
			  <t>The adjacency table contains information about adjacent autonomic nodes in general, independently of their domain and trust status. The next step determines to which of those autonomic nodes an ACP connection should be established.</t>
		    </section>
			<!-- preconditions -->

			<section anchor="selection" title="Candidate ACP Neighbor Selection">

				<t>An autonomic node must determine to which other autonomic nodes in the adjacency table it should build an ACP connection.</t> 
				<t>The ACP is by default established exclusively between nodes in the same domain.</t>
				<t>Intent can change this default behaviour. The precise format for this Intent needs to be defined outside this document. Example Intent policies are: 
				<list style="symbols">
				<t>The ACP should be built between all sub-domains for a given parent domain. For example: For domain "example.com", nodes of "example.com", "access.example.com", "core.example.com" and "city.core.example.com" should all establish one single ACP. </t>
				<t>Two domains should build one single ACP between themselves, for example "example1.com" should establish the ACP also with nodes from "example2.com". For this case, the two domains must be able to validate their trust, typically by cross-signing their certificate infrastructure. </t>
				</list>
				</t>
				<t>The result of the candidate ACP neighbor selection process is a list of adjacent or configured autonomic neighbors to which an ACP channel should be established. The next step begins that channel establishment.</t> 
			</section>
			<!-- selection -->
			
			<section anchor="negotiation" title="Capability Negotiation">
				<t>Autonomic devices may have different capabilities based on the type of device, OS version, etc. To establish a trusted secure ACP channel, devices must first negotiate their mutual capabilities in the data plane. This allows for the support of different channel types in the future. </t>
				
				<t>For each node on the candidate ACP neighbor list, capabilities need to be exchanged. The capability negotiation is based on GRASP <xref target="I-D.ietf-anima-grasp"/>. The relevant protocol details are defined in <xref target="protocol"/>. This negotiation MUST be secure: The identity of the other node MUST be validated during capability negotiation, and the exchange MUST be authenticated. </t>

				<t>The first parameter to be negotiated is the ACP Channel type. The channel types are defined in <xref target="channel"/>. Other parameters may be added later.</t>
				
				<t>Intent may also influence the capability negotiation. For example, Intent may require a minimum ACP tunnel security. This is outside scope for this document.</t>

			</section>
			<!-- negotiation -->

			<section anchor="establishment" title="Channel Establishment">
				<t>After authentication and capability negotiation autonomic nodes establish a secure channel towards the AN neighbors with the above negotiated parameters. </t>
				<t>The channel establishment MUST be authenticated. Whether or not, and how, a channel is encrypted is part of the capability negotiation, potentially controlled by Intent.</t>
				<t>In order to be independent of configured link addresses, channels SHOULD use IPv6 link local addresses between adjacent neighbors wherever possible. This way, the ACP tunnels are independent of correct network wide routing. </t>
				<t>Since channels are by default established between adjacent neighbors, the resulting overlay network does hop by hop encryption. Each node decrypts incoming traffic from the ACP, and encrypts outgoing traffic to its neighbors in the ACP. Routing is discussed in <xref target="routing"/>.</t>
				<t>If two nodes are connected via several links, the ACP SHOULD be established on every link, but it is possible to establish the ACP only on a sub-set of links. Having an ACP channel on every link has a number of advantages, for example it allows for a faster failover in case of link failure, and it reflects the physical topology more closely. Using a subset of links (for example, a single link), reduces resource consumption on the devices, because state needs to be kept per ACP channel. </t>
			</section>
			<!-- establishment -->

			<section anchor="separation" title="Context Separation">
				<t>The ACP is in a separate context from the normal data plane of the device. This context includes the ACP channels IPv6 forwarding and routing as well as any required higher layer ACP functions.</t>
				<t>In classical network device platforms, a dedicated so called "Virtual    routing and forwarding instance" (VRF) is one logical implementation     option for the ACP. If possible by the platform SW architecture,    separation options that minimize shared components are preferred. The context for the ACP needs to be established automatically during bootstrap of a device. As much as possible it should be protected from being modified unintentionally by data plane configuration.</t>
				<t>Context separation improves security, because the ACP is not reachable from the global routing table. Also, configuration errors from the data plane setup do not affect the ACP. </t>
				<t>[EDNOTE: Previous versions of this document also discussed an option where the ACP runs in the data plane without logical separation. Consensus is to focus only on the separated ACP now, and to remove the ACP in the data plane from this document. See <xref target="acp-in-dp"/> for the reasons for this decision.]</t>
			</section>
			<!-- separation -->

			<section anchor="addressing" title="Addressing inside the ACP">
				<t>The channels explained above typically only establish communication between two adjacent nodes. In order for communication to happen across multiple hops, the autonomic control plane requires internal network wide valid addresses and routing. Each autonomic node must create a virtual interface with a network wide unique address inside the ACP context mentioned in <xref target="separation"/>. 
            </t><t>
				The ACP is based exclusively on IPv6 addressing, for a variety of reasons: 
				<list style="symbols">
				<t>Simplicity, reliability and scale: If other network layer protocols were supported, each would have to have its own set of security associations, routing table and process, etc. </t>
				<t>Autonomic functions do not require IPv4: Autonomic functions and autonomic service agents are new concepts. They can be exclusively built on IPv6 from day one. There is no need for backward compatibility.</t>
				<t>OAM protocols no not require IPv4: The ACP may carry OAM protocols. All relevant protocols (SNMP, TFTP, SSH, SCP, Radius, Diameter, ...) are available in IPv6. </t>
				</list>
				</t>
				<t>Once an autonomic node is enrolled in a domain, it automatically creates a network wide Unique Local Addresses (ULA) in accordance with <xref target="RFC4193"/> with the following algorithm: 
            <list style="symbols">
               <t>Prefix FD00::/8, defining locally assigned unique local addresses. See Section 3.1 of <xref target="RFC4193"/>.</t>
               <t>Global ID: an MD5 hash of the domain ID, using the 40 least significant bits. This results in a pseudo-random global ID, in accordance with Section 3.2 of <xref target="RFC4193"/>.</t>
               <t>Subnet ID and interface ID: <xref target="I-D.behringer-anima-autonomic-addressing"/> defines how these fields can be constructed and used. </t>
            </list>
   			 </t>
			 <t>With this algorithm, all autonomic devices in the same domain have the same /48 prefix. Conversely, global IDs from different domains are unlikely to clash, such that two networks can be merged, as long as the policy allows that merge. See also <xref target="self-healing"/> for a discussion on merging domains.</t>
			 <t>Links inside the ACP only use link-local IPv6 addressing, such that each node only requires one routable virtual address. </t>
			</section>
			<!-- addressing -->
			
			<section anchor="routing" title="Routing in the ACP">
				<t>Once ULA address are set up all autonomic entities should run a routing protocol within the autonomic control plane context. This routing protocol distributes the ULA created in the previous section for reachability. The use of the autonomic control plane specific context eliminates the probable clash with the global routing table and also secures the ACP from interference from the configuration mismatch or incorrect routing updates.</t>
				<t>The establishment of the routing plane and its parameters are automatic and strictly within the confines of the autonomic control plane. Therefore, no manual configuration is required.</t>
				<t>All routing updates are automatically secured in transit as the channels of the autonomic control plane are by default secured. </t>
				<t>The routing protocol inside the ACP should be light weight and highly scalable to ensure that the ACP does not become a limiting factor in network scalability. We suggest the use of RPL <xref target="RFC6550"/> as one such protocol which is light weight and scales well for the control plane traffic. See <xref target="why-rpl"/> for more details on the choice of RPL. </t>
			</section>
			<!-- routing -->
			
		</section>
		<!-- self-creation -->

		<section anchor="workarounds" title="Workarounds for Non-Autonomic Nodes">
			<section anchor="NMS" title="Connecting a Non-Autonomic Controller / NMS system">
				<t>The Autonomic Control Plane can be used by management systems, such as controllers or network management system (NMS) hosts (henceforth called simply "NMS hosts"), to connect to devices through it. For this, an NMS host must have access to the ACP. By default, the ACP is a self-protecting overlay network, which only allows access to trusted systems. Therefore, a traditional, non-autonomic NMS system does not have access to the ACP by default, just like any other external device.</t>
				<t>If the NMS host is not autonomic, i.e., it does not support autonomic negotiation of the ACP, then it can be brought into the ACP by explicit configuration. On an adjacent autonomic node with ACP, the interface with the NMS host can be configured to be part of the ACP. In this case, the NMS host is with this interface entirely and exclusively inside the ACP. It would likely require a second interface for connections between the NMS host and administrators, or Internet based services. This mode of connecting an NMS host has security consequences: All systems and processes connected to this implicitly trusted interface have access to all autonomic nodes on the entire ACP, without further authentication. Thus, this connection must be physically controlled. </t>
				<t>The non-autonomic NMS host must be routed in the ACP. This involves two parts: 1) the NMS host must point default to the AN device for the ULA prefix used inside the ACP, and 2) the prefix used between AN node and NMS host must be announced into the ACP, and distributed there. </t>
				<t>The document <xref target="I-D.eckert-anima-stable-connectivity">"Autonomic Network Stable Connectivity"</xref> explains in more detail how the ACP can be integrated in a mixed NOC environment. </t>
			</section>
			<!-- NMS -->
			
			<section anchor="l3clouds" title="ACP through Non-Autonomic L3 Clouds">
				<t>Not all devices in a network may be autonomic. If non-autonomic Layer-2 devices are between autonomic nodes, the communications described in this document should work, since it is IP based. However, non-autonomic Layer-3 devices do not forward link local autonomic messages, and thus break the Autonomic Control Plane.</t>
				<t>One workaround is to manually configure IP tunnels between autonomic nodes across a non-autonomic Layer-3 cloud. The tunnels are represented on each autonomic node as virtual interfaces, and all autonomic transactions work across such tunnels.</t>
				<t>Such manually configured tunnels are less "indestructible" than an automatically created ACP based on link local addressing, since they depend on correct data plane operations, such as routing and addressing.</t>
			</section>
			<!-- l3clouds-->
			
		</section>
		<!-- workarounds --> 
		
		<section anchor="protocol" title="The Negotiation Protocol">
			<t>This section describes the negotiation exchange in detail. It is based on GRASP <xref target="I-D.ietf-anima-grasp"/>. Since at the time of establishing the ACP channel there is obviously no ACP yet, this negotiation protocol must run in the data plane. This negotiation MUST be authenticated, to avoid downgrade attackes, where an attacker injects bogus negotiation messages demanding a less secure ACP channel type. The negotiation MAY be encrypted.</t>
			<t>[The detailed negotiation flow and mapping into GRASP messages is to be completed.]</t>
		</section> 
		<!-- protocol --> 
		
		<section anchor="channel" title="The Channel Type">
			<t>Two adjacent nodes negotiate an ACP channel. This channel MUST be authenticated and SHOULD be encrypted. </t>
			<t>The nodes negotiate a parameter called "ACP channel type". This document defines a single, MUST implement channel type: GRE with IPsec transport mode. See <xref target="iana">IANA Considerations</xref> for the formal definition of this parameter. </t>
		</section> 
		<!-- channel --> 

		<section anchor="self-healing" title="Self-Healing Properties">
			<t>The ACP is self-healing:</t>
			<t>
				<list style="symbols">
					<t>New neighbors will automatically join the ACP after successful validation and will become reachable using their unique ULA address across the ACP.</t>
					<t>When any changes happen in the topology, the routing protocol used in the ACP will automatically adapt to the changes and will continue to provide reachability to all devices.</t>
					<t>If an existing device gets revoked, it will automatically be denied access to the ACP as its domain certificate will be validated against a Certificate Revocation List during authentication. Since the revocation check is only done at the establishment of a new security association, existing ones are not automatically torn down. If an immediate disconnect is required, existing sessions to a freshly revoked device can be re-set.</t>
				</list>
			</t>
			<t>The ACP can also sustain network partitions and mergers. Practically all ACP operations are link local, where a network partition has no impact. Devices authenticate each other using the domain certificates to establish the ACP locally. Addressing inside the ACP remains unchanged, and the routing protocol inside both parts of the ACP will lead to two working (although partitioned) ACPs. </t>
			<t>There are few central dependencies: A certificate revocation list (CRL) may not be available during a network partition; a suitable policy to not immediately disconnect neighbors when no CRL is available can address this issue. Also, a registrar or Certificate Authority might not be available during a partition. This may delay renewal of certificates that are to expire in the future, and it may prevent the enrolment of new devices during the partition. </t>
			<t>After a network partition, a re-merge will just establish the previous status, certificates can be renewed, the CRL is available, and new devices can be enrolled everywhere. Since all devices use the same trust anchor, a re-merge will be smooth.</t>
			<t>Merging two networks with different trust anchors requires the trust anchors to mutually trust each other (for example, by cross-signing). As long as the domain names are different, the addressing will not overlap (see <xref target="addressing"/>).</t>
		</section>
		<!-- self-healing -->

		<section anchor="self-protecting" title="Self-Protection Properties">
			<t>As explained in <xref target="self-creation"/>, the ACP is based on channels being built between devices which have been previously authenticated based on their domain certificates. The channels themselves are protected using standard encryption technologies like DTLS or IPsec which provide additional authentication during channel establishment, data integrity and data confidentiality protection of data inside the ACP and in addition, provide replay protection.</t>
			<t>An attacker will therefore not be able to join the ACP unless having a valid domain certificate, also packet injection and sniffing traffic will not be possible due to the security provided by the encryption protocol.</t>
			<t>The remaining attack vector would be to attack the underlying AN protocols themselves, either via directed attacks or by denial-of-service attacks.  However, as the ACP is built using link-local IPv6 address, remote attacks are impossible. The ULA addresses are only reachable inside the ACP context, therefore unreachable from the data plane. Also, the ACP protocols should be implemented to be attack resistant and not consume unnecessary resources even while under attack.</t>
		</section>
		<!-- self-protecting -->
		
		<section anchor="admin-view" title="The Administrator View">
			<t>An ACP is self-forming, self-managing and self-protecting, therefore has minimal dependencies on the administrator of the network. Specifically, since it is independent of configuration, there is no scope for configuration errors on the ACP itself. The administrator may have the option to enable or disable the entire approach, but detailed configuration is not possible. This means that the ACP must not be reflected in the running configuration of devices, except a possible on/off switch. </t>
			<t>While configuration is not possible, an administrator must have full visibility of the ACP and all its parameters, to be able to do trouble-shooting. Therefore, an ACP must support all show and debug options, as for any other network function. Specifically, a network management system or controller must be able to discover the ACP, and monitor its health. This visibility of ACP operations must clearly be separated from visibility of data plane so automated systems will never have to deal  with ACP aspect unless they explicitly desire to do so.</t>
			<t>Since an ACP is self-protecting, a device not supporting the ACP, or without a valid domain certificate cannot connect to it. This means that by default a traditional controller or network management system cannot connect to an ACP. See <xref target="NMS"/> for more details on how to connect an NMS host into the ACP.</t>
		</section>
		<!-- admin-view -->
		
		<section anchor="security" title="Security Considerations">
			<t>An ACP is self-protecting and there is no need to apply configuration to make it secure. Its security therefore does not depend on configuration. </t>
			<t>However, the security of the ACP depends on a number of other factors: 
				<list style="symbols">
				   <t>The usage of domain certificates depends on a valid supporting PKI infrastructure. If the chain of trust of this PKI infrastructure is compromised, the security of the ACP is also compromised. This is typically under the control of the network administrator. </t>
				   <t>Security can be compromised by implementation errors (bugs), as in all products. </t></list>
			</t>
			<t>Fundamentally, security depends on correct operation, implementation and architecture. Autonomic approaches such as the ACP largely eliminate the dependency on correct operation; implementation and architectural mistakes are still possible, as in all networking technologies. </t>
		</section>
		<!-- security -->
		<section anchor="iana" title="IANA Considerations">
			<t><xref target="channel"/> describes an option for the channel negotiation, the channel type. We request IANA to create a registry for ACP channel types. </t>
			<t>The ACP channel type is a 8-bit unsigned integer. This document only assigns the first value.</t>
			
	      <t><figure>
          <artwork><![CDATA[
     Number | Channel Type                      | RFC
   ---------+-----------------------------------+------------
         0  | GRE tunnel protected with         | this document
            | IPsec transport mode              |
     1-255  | reserved for future channel types | 
]]></artwork>
        </figure>
        </t>
		</section>
		<!-- iana -->
		<section anchor="ack" title="Acknowledgements">
			<t>This work originated from an Autonomic Networking project at Cisco Systems, which started in early 2010. Many people contributed to this project and the idea of the Autonomic Control Plane, amongst which (in alphabetical order): Ignas Bagdonas, Parag Bhide, Alex Clemm, Yves Hertoghs, Bruno Klauser, Max Pritikin, Ravi Kumar Vadapalli.</t>
			<t>Further input and suggestions were received from: Rene Struik, Brian Carpenter, Benoit Claise. </t>
		</section>
		<!-- ack -->
		<section anchor="changes" title="Change log [RFC Editor: Please remove]">
			<section title="Initial version">
				<t>First version of this document: <xref target="I-D.behringer-autonomic-control-plane"/></t>
			</section>
			<section title="draft-behringer-anima-autonomic-control-plane-00">
				<t>Initial version of the anima document; only minor edits.</t>
			</section>
			<section title="draft-behringer-anima-autonomic-control-plane-01">
				<t><list style="symbols">
				<t>Clarified that the ACP should be based on, and support only IPv6.</t>
				<t>Clarified in intro that ACP is for both, between devices, as well as for access from a central entity, such as an NMS. </t>
				<t>Added a section on how to connect an NMS system.</t>
				<t>Clarified the hop-by-hop crypto nature of the ACP.</t>
				<t>Added several references to GDNP as a candidate protocol.</t>
				<t>Added a discussion on network split and merge. Although, this should probably go into the certificate management story longer term.</t>
				</list>	</t>
			</section>
			<section title="draft-behringer-anima-autonomic-control-plane-02">
				<t>Addresses (numerous) comments from Brian Carpenter. See mailing list for details. The most important changes are: 
				<list style="symbols">
				<t>Introduced a new section "overview", to ease the understanding of the approach. </t>
				<t>Merged the previous "problem statement" and "use case" sections into a mostly re-written "use cases" section, since they were overlapping.</t>
				<t>Clarified the relationship with draft-eckert-anima-stable-connectivity</t>
				</list>
				</t>
			</section>
			<section title="draft-behringer-anima-autonomic-control-plane-03">
				<t><list style="symbols">
				<t>Took out requirement for IPv6 --> that's in the reference doc. </t>
				<t>Added requirement section.</t>
				<t>Changed focus: more focus on autonomic functions, not only virtual out of band. This goes a bit throughout the document, starting with a changed abstract and intro. </t>
				</list>	</t>
			</section>
			<section title="draft-ietf-anima-autonomic-control-plane-00">
				<t>No changes; re-submitted as WG document. </t>
			</section>
			<section title="draft-ietf-anima-autonomic-control-plane-01">
				<t><list style="symbols">
				<t>Added some paragraphs in addressing section on "why IPv6 only", to reflect the discussion on the list. </t>
				<t>Moved the data-plane ACP out of the main document, into an appendix. The focus is now the virtually separated ACP, since it has significant advantages, and isn't much harder to do.</t>
				<t>Changed the self-creation algorithm: Part of the initial steps go into the reference document. This document now assumes an adjacency table, and domain certificate. How those get onto the device is outside scope for this document. </t>
				<t>Created a new section 6 "workarounds for non-autonomic nodes", and put the previous controller section (5.9) into this new section. Now, section 5 is "autonomic only", and section 6 explains what to do with non-autonomic stuff. Much cleaner now. </t>
				<t>Added an appendix explaining the choice of RPL as a routing protocol.</t>
				<t>Formalised the creation process a bit more. Now, we create a "candidate peer list" from the adjacency table, and form the ACP with those candidates. Also it explains now better that policy (Intent) can influence the peer selection. (section 4 and 5)</t>
				<t>Introduce a section for the capability negotiation protocol (section 7). This needs to be worked out in more detail. This will likely be based on GRASP. </t>
				<t>Introduce a new parameter: ACP tunnel type. And defines it in the IANA considerations section. Suggest GRE protected with IPSec transport mode as the default tunnel type.</t>
				<t>Updated links, lots of small edits. </t>
				</list>
				</t>
			</section>
		</section>
		<!-- changes -->

	</middle>
	<back>
		<references title="Normative References">
			<?rfc include='reference.RFC.4122'?>
			<?rfc include='reference.RFC.4193'?>
			<?rfc include='reference.RFC.6550'?>
			<?rfc include='reference.RFC.7575'?>
			<?rfc include='reference.RFC.7576'?>			
			<?rfc include="reference.I-D.ietf-anima-bootstrapping-keyinfra.xml"?>
			<?rfc include="reference.I-D.behringer-anima-reference-model.xml"?>
			<?rfc include="reference.I-D.ietf-anima-grasp.xml"?>
			<?rfc include="reference.I-D.behringer-autonomic-control-plane.xml"?>
			<?rfc include="reference.I-D.eckert-anima-stable-connectivity.xml"?>
			<?rfc include="reference.I-D.behringer-anima-autonomic-addressing.xml"?>
		</references>

		<references title="Informative References">
                  <reference anchor="craft"
                             target="https://en.wikipedia.org/wiki/Craft_access_system">
                    <front>
                      <title>Craft Access System</title>
                      <author surname="Wikipedia"></author>
                      <date month="Nov" year="2015" />
                    </front>
                  </reference>
                        
                </references>
		<section anchor="why-rpl" title="Background on the choice of routing protocol">
			<t>In a pre-standard implementation, the "IPv6 Routing Protocol for Low-Power and Lossy Networks (RPL, <xref target="RFC6550"/> was chosen. This Appendix explains the reasoning behind that decision.  </t>
			<t>Requirements for routing in the ACP are: 
			<list style="symbols">
			<t>Self-management: The ACP must build automatically, without human intervention. Therefore routing protocol must also work completely automatically. RPL is a simple, self-managing protocol, which does not require zones or areas; it is also self-configuring, since configuration is carried as part of the protocol (see Section 6.7.6 of <xref target="RFC6550"/>). </t> 
			<t>Scale: The ACP builds over an entire domain, which could be a large enterprise or service provider network. The routing protocol must therefore support domains of 100,000 nodes or more, ideally without the need for zoning or separation into areas. RPL has this scale property. This is based on extensive use of default routing. RPL also has other scalability improvements, such as selecting only a subset of peers instead of all possible ones, and trickle support for information synchronisation.</t>
			<t>Low resource consumption: The ACP supports traditional network infrastructure, thus runs in addition to traditional protocols. The ACP, and specifically the routing protocol must have low resource consumption both in terms of memory and CPU requirements. Specifically, at edge nodes, where memory and CPU are scarce, consumption should be minimal. RPL builds a destination-oriented directed acyclic graph (DODAG), where the main resource consumption is at the root of the DODAG. The closer to the edge of the network, the less state needs to be maintained. This adapts nicely to the typical network design. Also, all changes below a common parent node are kept below that parent node. </t>
			<t>Support for unstructured address space: In the Autonomic Networking Infrastructure, node addresses are identifiers, and may not be assigned in a topological way. Also, nodes may move topologically, without changing their address. Therefore, the routing protocol must support completely unstructured address space. RPL is specifically made for mobile ad-hoc networks, with no assumptions on topologically aligned addressing. </t>
			<t>Modularity: To keep the initial implementation small, yet allow later for more complex methods, it is highly desirable that the routing protocol has a simple base functionality, but can import new functional modules if needed. RPL has this property with the concept of "objective function", which is a plugin to modify routing behaviour.</t>
			<t>Extensibility: Since the Autonomic Networking Infrastructure is a new concept, it is likely that changes in the way of operation will happen over time. RPL allows for new objective functions to be introduced later, which allow changes to the way the routing protocol creates the DAGs. </t>
			<t>Multi-topology support: It may become necessary in the future to support more than one DODAG for different purposes, using different objective functions. RPL allow for the creation of several parallel DODAGs, should this be required. This could be used to create different topologies to reach different roots. </t>
			<t>No need for path optimisation: RPL does not necessarily compute the optimal path between any two nodes. However, the ACP does not require this today, since it carries mainly non-delay-sensitive feedback loops. It is possible that different optimisation schemes become necessary in the future, but RPL can be expanded (see point "Extensibility" above). </t>
			</list></t>
		</section>
		
		<section anchor="acp-in-dp" title="Alternative: An ACP without Separation">
			<t><xref target="self-creation"/> explains how the ACP is constructed as a virtually separated overlay network. An alternative ACP design can be achieved without the VRFs. In this case, the autonomic virtual addresses are part of the data plane, and subject to routing, filtering, QoS, etc on the data plane. The secure tunnels are in this case used by traffic to and from the autonomic address space. They are still required to provide the authentication function for all autonomic packets. </t>
			<t>At IETF 93 in Prague, the suggestion was made to not advance with the data plane ACP, and only continue with the virtually separate ACP. The reason for this decision is that the contextual separation of the ACP provides a range of benefits (more robustness, less potential interactions with user configurations), while it is not much harder to achieve. </t>
			<t>This appendix serves to explain the decision; it will be removed in the next version of the draft. </t>
		</section>

	</back>
</rfc>

<!-- Local Variables:  -->
<!-- mode: xml         -->
<!-- End:              -->



